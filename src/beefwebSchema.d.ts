/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/player": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get player state */
        get: operations["getPlayerState"];
        put?: never;
        /** Set player state */
        post: operations["setPlayerState"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Play current item */
        post: operations["playCurrent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/play/{playlistId}/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Play specific playlist item */
        post: operations["playItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/play/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Play random item in currently played playlist */
        post: operations["playRandom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Play next item in currently played playlist */
        post: operations["playNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Play previous item in currently played playlist */
        post: operations["playPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop player */
        post: operations["stop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause player */
        post: operations["pause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/pause/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle pause state */
        post: operations["togglePause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get playlists */
        get: operations["getPlaylists"];
        put?: never;
        /** Update playlist collection */
        post: operations["updatePlaylists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add playlist */
        post: operations["addPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/remove/{playlistId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove playlist */
        post: operations["removePlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/move/{playlistId}/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move playlist to new position */
        post: operations["movePlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/items/{range}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get playlist items */
        get: operations["getPlaylistItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update playlist */
        post: operations["updatePlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clear playlist */
        post: operations["clearPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/items/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add playlist items */
        post: operations["addPlaylistItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/items/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy playlist items */
        post: operations["copyPlaylistItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{sourceId}/{targetId}/items/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy playlist items between playlists */
        post: operations["copyPlaylistItemsEx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/items/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move playlist items */
        post: operations["movePlaylistItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{sourceId}/{targetId}/items/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move playlist items between playlists */
        post: operations["movePlaylistItemsEx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/items/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove playlist items */
        post: operations["removePlaylistItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/items/sort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sort playlist items */
        post: operations["sortPlaylistItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["query"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/browser/roots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file system roots */
        get: operations["getFsRoots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/browser/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file system entries */
        get: operations["getFsEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artwork/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get artwork for currently playing item */
        get: operations["getCurrentArtwork"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artwork/{playlistId}/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get artwork for specific playlist item */
        get: operations["getArtwork"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        PlaybackState: "stopped" | "playing" | "paused";
        /** @enum {string} */
        VolumeType: "db" | "linear";
        PlayerState: {
            info?: components["schemas"]["PlayerInfo"];
            activeItem?: {
                playlistId?: string;
                playlistIndex?: number;
                index?: number;
                position?: number;
                duration?: number;
                columns?: string[];
            };
            playbackState?: components["schemas"]["PlaybackState"];
            /** @deprecated */
            playbackMode?: number;
            /** @deprecated */
            playbackModes?: string[];
            volume?: {
                type?: components["schemas"]["VolumeType"];
                min?: number;
                max?: number;
                value?: number;
                isMuted?: boolean;
            };
        };
        PlayerInfo: {
            name?: string;
            title?: string;
            version?: string;
            pluginVersion?: string;
        };
        PlaylistInfo: {
            id?: string;
            index?: number;
            title?: string;
            isCurrent?: boolean;
            itemCount?: number;
            totalTime?: number;
        };
        PlaylistsResult: components["schemas"]["PlaylistInfo"][];
        PlaylistItemInfo: {
            columns?: string[];
        };
        PlaylistItemsResult: {
            offset?: number;
            totalCount?: number;
            items?: components["schemas"]["PlaylistItemInfo"][];
        };
        SetPlayerStateRequest: {
            /** @description New volume value */
            volume?: number;
            /** @description New mute state */
            isMuted?: boolean;
            /** @description New absolute playback position (seconds) */
            position?: number;
            /** @description New relative playback position (seconds) */
            relativePosition?: number;
            /**
             * @deprecated
             * @description New playback mode index
             */
            playbackMode?: number;
            /** @description Options to modify */
            options?: {
                /** @description Option identifier */
                id?: string;
                /** @description New option value */
                value?: number;
            }[];
        };
        AddItemsRequest: {
            /** @description Position to add items at */
            index?: number;
            /** @description Process request asynchronously */
            async?: boolean;
            /** @description Replace target playlist with specified items */
            replace?: boolean;
            /** @description Start playback of added items */
            play?: boolean;
            /** @description Items to add (files, directories, URLs) */
            items?: string[];
        };
        ItemIndexesRequest: {
            items?: number[];
        };
        FileSystemEntry: {
            /** @description File name */
            name?: string;
            /** @description Full file path */
            path?: string;
            /**
             * @description File type
             * @enum {string}
             */
            type?: "D" | "F";
            /** @description File size in bytes */
            size?: number;
            /** @description File timestamp (seconds since Unix epoch) */
            timestamp?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPlayerState: {
        parameters: {
            query?: {
                /** @description Active item columns to return */
                columns?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        player?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    setPlayerState: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request to modify player state */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetPlayerStateRequest"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    playCurrent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    playItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
                /** @description Item index */
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    playRandom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    playNext: {
        parameters: {
            query?: {
                /** @description Expression to select next item by (e.g. %artist%). */
                by?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    playPrevious: {
        parameters: {
            query?: {
                /** @description Expression to select previous item by (e.g. %artist%). */
                by?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    stop: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pause: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    togglePause: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlaylists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        playlists?: components["schemas"]["PlaylistsResult"];
                    };
                };
            };
        };
    };
    updatePlaylists: {
        parameters: {
            query?: {
                /** @description Playlist id or index to make current */
                current?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addPlaylist: {
        parameters: {
            query?: {
                /** @description Position to add playlist at. By default playlist is added to the last position */
                index?: number;
                /** @description New playlist title */
                title?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    movePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
                /** @description Target position. Use negative value to move to the last position */
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlaylistItems: {
        parameters: {
            query: {
                /** @description Item columns to return */
                columns: string[];
            };
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
                /** @description Playlist item range in form offset:count */
                range: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        playlistItems?: components["schemas"]["PlaylistItemsResult"];
                    };
                };
            };
        };
    };
    updatePlaylist: {
        parameters: {
            query?: {
                /** @description New playlist title */
                title?: string;
            };
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clearPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addPlaylistItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        /** @description Items to add */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddItemsRequest"];
            };
        };
        responses: {
            /** @description Asynchronous request accepted for processing */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    copyPlaylistItems: {
        parameters: {
            query?: {
                /** @description Position to copy items to. Items are copied to the end of the playlist by default */
                targetIndex?: number;
            };
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        /** @description Indexes of items to copy */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemIndexesRequest"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    copyPlaylistItemsEx: {
        parameters: {
            query?: {
                /** @description Playlist position to copy items to. Items are copied to the end of the playlist by default */
                targetIndex?: number;
            };
            header?: never;
            path: {
                /** @description Source playlist id or index */
                sourceId: string;
                /** @description Target playlist id or index */
                targetId: string;
            };
            cookie?: never;
        };
        /** @description Indexes of items to copy */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemIndexesRequest"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    movePlaylistItems: {
        parameters: {
            query?: {
                /** @description Position to move items to. Items are moved to the end of the playlist by default */
                targetIndex?: number;
            };
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        /** @description Indexes of items to move */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemIndexesRequest"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    movePlaylistItemsEx: {
        parameters: {
            query?: {
                /** @description Position to move items to. Items are moved to the end of the playlist by default */
                targetIndex?: number;
            };
            header?: never;
            path: {
                /** @description Source playlist id or index */
                sourceId: string;
                /** @description Target playlist id or index */
                targetId: string;
            };
            cookie?: never;
        };
        /** @description Indexes of items to move */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemIndexesRequest"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removePlaylistItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        /** @description Indexes of items to remove */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemIndexesRequest"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sortPlaylistItems: {
        parameters: {
            query?: {
                /** @description Expression to sort by (e.g. %title%) */
                by?: string;
                /** @description Sort in descending order */
                desc?: boolean;
                /** @description Sort randomly */
                random?: boolean;
            };
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    query: {
        parameters: {
            query?: {
                /** @description Request player state */
                player?: boolean;
                /** @description Active item columns to return */
                trcolumns?: string[];
                /** @description Request playlists */
                playlists?: boolean;
                /** @description Request playlist items */
                playlistItems?: boolean;
                /** @description Playlist id or index to return items from */
                plref?: string;
                /** @description Playlist range to return items from */
                plrange?: string;
                /** @description Playlist item columns to return */
                plcolumns?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        player?: components["schemas"]["PlayerState"];
                        playlists?: components["schemas"]["PlaylistsResult"];
                        playlistItems?: components["schemas"]["PlaylistItemsResult"];
                    };
                };
            };
        };
    };
    getFsRoots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        pathSeparator?: string;
                        roots?: components["schemas"]["FileSystemEntry"][];
                    };
                };
            };
        };
    };
    getFsEntries: {
        parameters: {
            query?: {
                /** @description Directory path */
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        pathSeparator?: string;
                        entries?: components["schemas"]["FileSystemEntry"][];
                    };
                };
            };
        };
    };
    getCurrentArtwork: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No artwork is found for current item or no item is playing */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArtwork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Playlist id or index */
                playlistId: string;
                /** @description Item index */
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No artwork is found for specified item */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
